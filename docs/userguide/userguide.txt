Templum Userguide
=================
Ferry Boender
0.2.0, Apr 26, 2009
:Author Initials: FB

About
-----

Templum is an extremely lightweight, simple yet powerful and fast templating
engine for PHP. It re-uses the power of PHP itself for rendering templates, but
provides additional features making it easier to write templating code.
Rendering templates using Templum is very fast; it approximates native PHP
rendering speed for include() statements.

=== Features ===

- Lightweight. Only a single file; about 120 lines of code (excluding
  +/- 130 lines of API comments).
- Re-uses PHP alternative syntax for clarity and full power.
- Very fast. Renders 10,000 templates in 0.741s (Native PHP takes
  0.633s).
- I18N (translated) templates.
- Per-session caching of rendered templates.
- Security by automatic encoding of HTML entities.
- Universal, global and local variables.
- PHP v4 and v5 support.

Usage
-----

=== API ===

Templum consists of two main classes.

+link:http://templum.electricmonk.nl/docs/api/html/classTemplum.html[Templum]+::
  The Templum class is the main class that facilitates templates. It retrieves
  (translated) templates from disk or cache, compiles them and then returns
  them ready for rendering as a TemplumTemplate class instance.

+link:http://templum.electricmonk.nl/docs/api/html/classTemplumTemplate.html[TemplumTemplate]+::
  TemplumTemplate class instances represent templates ready for rendering by
  your application. They are instantiated by the Templum class, so you
  shouldn't have to create them yourself. They handle the actual rendering of
  the template. The TemplumTemplate class also knows how to handle errors in
  your templates, and has helper functions which can be used from your
  templates to easily include other templates and to render variabels.

For a complete overview of the API, please see the
link:http://templum.electricmonk.nl/docs/api/html/index.html[API reference
documentation].

Here's an example that uses just about all of the Templum API, except for
Internationalisation:

------------------------------------------------------------------------
include::api.php[]
------------------------------------------------------------------------

=== Template Language ===

The Templum template language is extremely simple. It re-uses PHP's own
link:http://nl2.php.net/alternative_syntax[alternative syntax] for control
logic in the templates. It includes some simple special markup that makes it
easier to write templates:

+{{+ and +}}+::
	Echo's the variable, function or other PHP printables between the
	accolades. Echo'ed contents is automatically escaped using
	+htmlentities()+ (can be turned off).
+[[+ and +]]+::
	Execute the PHP code between the brackets.
+@line+::
	An +at+ sign (@) at the beginning of the line (prepended whitespace is
	allowed) will cause the entire line to be executed as PHP code.

It is recommended to use the Alternative PHP syntax for control structures
(+if+, +while+, +for+, etc) as it greatly enhances the readability of your
templates.

An example of a template that uses all available syntax as well as the
Alternative PHP syntax:

------------------------------------------------------------------------
include::list.tpl[]
------------------------------------------------------------------------

=== Variables ===

Variables can be easily used in your templates. Templum provides three types
of variables:

==== Universal Variables: ====

Universal variables are set in the main Templum template engine class, and are
available in all the templates retrieved using the main engine.

Universal variables can be set when creating the Templum object instance, by
passing an array with key/value pairs to the $varsUniveral parameter. For
example:

------------------------------------------------------------------------
$templum = new Templum('view', array(
    'username'=>'jjohnson',
	'realname'=>'John Johnson')
;
------------------------------------------------------------------------

This makes the value 'jjohnson' available in your templates under the
variablename +$username+.

Instead of manually building the array of key/value names, you can also use the
PHP +compact()+ function. This function takes strings as parameters and then
creates an key/value array of these variables and their values. The variables
have to be defined in the local scope for this. Example:

------------------------------------------------------------------------
$username = 'jjohnson';
$realname = 'John Johnson';

$variables = compact('username', 'realname');

var_dump($variables);
// Output:
//   array(2) {
//     ["username"]=>
//     string(8) "jjohnson"
//     ["realname"]=>
//     string(12) "John Johnson"
//   }

$templum = new Templum('view', compact('username', 'realname'));
------------------------------------------------------------------------

You can set additional Universal variables using the +Templum->setVar()+
method of the Templum class. The +setVar()+ method takes two parameters:
+$varName+ and +$varValue+. For example:

------------------------------------------------------------------------
$templum->setVar('email', 'j.johnson@example.com');
------------------------------------------------------------------------

==== Global Variables: ====

Global variables are available to a single template, and any templates that are
included by that template. They are set when retrieving a template by passing
an key/value array to the +$varsGlobal+ parameter of the +Templum->template()+
method. Example:

------------------------------------------------------------------------
$templum->template('account/info', array(''=>'');
------------------------------------------------------------------------

the retrieved template and any templates
included by that template. Additional global variables can be set using the
+TemplumTemplate->setVar()+ method on templates.

Global variables 
The global variables are set using the +$varsGlobal+ parameter when you ask the
Templum class for a template using +Templum->template()+ method. Global
variables will be available to the retrieved template and any templates
included by that template. Additional global variables can be set using the
+TemplumTemplate->setVar()+ method on templates.

==== Local Variables ====

The Local variables are set when rendering the template by specifying the
+$varsLocal+ parameter to the +TemplumTemplate->render()+ method. The Local
variables will only be available to the template being rendered.

An easy way to pass variables is the PHP +compact()+ function. It takes a list
a variable names as strings, and then looks at the current scope and creates an
associative array with the variables:

------------------------------------------------------------------------
$firstname = 'John';
$lastname = 'Johnson';

var_dump(compact('firstname', 'lastname'));

// Output:
//
// array(2) {
//   ["firstname"]=>
//   string(4) "John"
//   ["lastname"]=>
//   string(7) "Johnson"
// }
------------------------------------------------------------------------

Here's an example that sets Universal, Global and Local variables:

------------------------------------------------------------------------
<?php

require_once('../../src/templum.php');

$app_title = "MyApp";
$username = "fboender";
$controllerCurrent = "users.list";
$controllerTarget = "users.edit";
$users = array(
	"jjohnson"  => "John Johnson",
	"ppeterson" => "Pete Peterson",
	"jdoe"      => "John Doe"
);

// Universal variable $app_title
$templum = new Templum('view', compact('app_title'));

// Univeral variable $username
$templum->setVar('username', $username);

// Global variable $controllerCurrent
$template = $templum->template('users.list', compact('controllerCurrent'));

// Global variable $controllerTarget
$template->setVar('controllerTarget', $controllerTarget);

// Local variable '$users'
print($template->render(compact('users')));
------------------------------------------------------------------------

=== Errors ===

==== PHP5 ====

The two classes +Templum+ and +TemplumTemplate+ both have their own Exception
class:

+TemplumError+::
  This exception is thrown by the Templum class when an error occurs
  such as non-existing templates, etc.

+TemplumTemplateError+::
  This exception is thrown by the +TemplumTemplate+ class when errors occur in
  rendering your template. This includes PHP errors such as uninitialized
  variables. These errors are intercepted by the +TemplumTemplate+ class and
  then raised as +TemplumTemplateError+ exceptions.

Fatal errors that occur during template rendering cannot be intercepted by
Templum, and therefor show normal PHP errors.

Please see the API documentation for information on which methods throw which
exceptions.

==== PHP 4 ====

The PHP v4 support for errors in Templum is rather limited. Everything is
simply handled as a terminal error, and your script will die.

=== Internationalisation (I18N) ===

FIXME: Description of Internationalisation support.

For now, see the +examples/i18n/+ example.

== Security ==

FIXME: Some explanation about why templum is secure.


